{"version":3,"sources":["SearchBox/index.js","Station/StationMap.js","Station/StationDetail.js","Main/index.js","hooks/useStations.js","App/index.js","reportWebVitals.js","index.js"],"names":["SearchBox","stations","setSelectedStation","Autocomplete","options","getOptionLabel","option","name","address","renderInput","params","TextField","label","margin","variant","onChange","event","value","reason","StationMap","latitude","longitude","MapContainer","style","height","center","zoom","TileLayer","attribution","url","Marker","position","Popup","StationDetail","station","Fragment","rental_methods","join","lat","lon","Main","stationsURL","useState","state","setStations","useEffect","a","fetch","response","ok","Error","status","statusText","json","responseBody","data","fetchData","catch","error","message","useStations","selectedStation","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSA0BeA,MAtBf,YAAsD,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,mBAC7B,OACE,cAACC,EAAA,EAAD,CACEC,QAASH,EACTI,eAAgB,SAACC,GAAD,gBAAeA,EAAOC,KAAtB,aAA+BD,EAAOE,QAAtC,MAChBC,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BACMD,GADN,IAEEE,MAAM,iBACNC,OAAO,SACPC,QAAQ,eAGZC,SAAU,SAACC,EAAOC,EAAOC,GACR,kBAAXA,GACFhB,EAAmBe,O,oCCWdE,MA3Bf,YAA6D,IAAvCC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,UAAWd,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAC/C,OAAKY,GAAaC,EAKhB,eAACC,EAAA,EAAD,CACEC,MAAO,CAAEC,OAAQ,KACjBC,OAAQ,CAACL,EAAUC,GACnBK,KAAM,GAHR,UAOE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,cAACC,EAAA,EAAD,CAAQC,SAAU,CAACX,EAAUC,GAA7B,SACE,eAACW,EAAA,EAAD,WACE,iCAASzB,IACT,8BAAMC,WAdZ,UAKUY,GALV,OAKqBC,IATd,M,MCyBIY,MA1Bf,YAAqC,IAAZC,EAAW,EAAXA,QACvB,OAAKA,EAKH,eAAC,IAAMC,SAAP,WACE,iDACA,+BACE,sCACA,6BAAKD,EAAQ3B,OACb,yCACA,6BAAK2B,EAAQ1B,UACb,gDACA,6BAAK0B,EAAQE,eAAeC,KAAK,WAEnC,cAAC,EAAD,CACEjB,SAAUc,EAAQI,IAClBjB,UAAWa,EAAQK,IACnBhC,KAAM2B,EAAQ3B,KACdC,QAAS0B,EAAQ1B,aAlBd,MC8BIgC,MA5Bf,WACE,IAAMvC,ECPO,SAAqBwC,GAAc,IAAD,EACfC,mBAAS,CAAEC,MAAO,YADH,mBACxC1C,EADwC,KAC9B2C,EAD8B,KAyB/C,OAtBAC,qBAAU,WAAM,4CAQd,8BAAAC,EAAA,sEACyBC,MAAMN,GAD/B,WACQO,EADR,QAGgBC,GAHhB,sBAIU,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,YAAgCH,EAASI,aAJnD,uBAO6BJ,EAASK,OAPtC,OAOQC,EAPR,OAQEV,EAAY,CAAED,MAAO,WAAY1B,MAAOqC,EAAaC,KAAKtD,WAR5D,4CARc,kEAmBduD,GAAYC,OAlBZ,SAAqBC,GACnBd,EAAY,CACVD,MAAO,WACPe,MAAOA,EAAMC,eAgBhB,CAAClB,IAEGxC,EDlBU2D,CAHjB,yEAEc,EAEgClB,mBAAS,IAFzC,mBAEPmB,EAFO,KAEU3D,EAFV,KAId,MAAuB,YAAnBD,EAAS0C,MACJ,sDAGc,aAAnB1C,EAAS0C,MAET,+EAEG,IAAM1C,EAASyD,SAMpB,eAAC,IAAMvB,SAAP,WACE,cAAC,EAAD,CACElC,SAAUA,EAASgB,MACnBf,mBAAoBA,IAEtB,cAAC,EAAD,CAAegC,QAAS2B,QEdfC,MAbf,WACE,OACE,sBAAMC,UAAU,MAAhB,SACE,oCACE,+DACqB,qCADrB,YAGA,cAAC,EAAD,UCCOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6289a5cb.chunk.js","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nfunction SearchBox({ stations, setSelectedStation }) {\n  return (\n    <Autocomplete\n      options={stations}\n      getOptionLabel={(option) => `${option.name} (${option.address})`}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Find a station\"\n          margin=\"normal\"\n          variant=\"outlined\"\n        />\n      )}\n      onChange={(event, value, reason) => {\n        if (reason === \"select-option\") {\n          setSelectedStation(value);\n        }\n      }}\n    />\n  );\n}\n\nexport default SearchBox;\n","import React from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\n\nfunction StationMap({ latitude, longitude, name, address }) {\n  if (!latitude || !longitude) {\n    return null;\n  }\n\n  return (\n    <MapContainer\n      style={{ height: 350 }}\n      center={[latitude, longitude]}\n      zoom={14}\n      // \"key\" ensures MapContainer re-centers when the latitude/longitude change by re-initialising the MapContainer component\n      key={`${latitude}${longitude}`}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <Marker position={[latitude, longitude]}>\n        <Popup>\n          <strong>{name}</strong>\n          <div>{address}</div>\n        </Popup>\n      </Marker>\n    </MapContainer>\n  );\n}\n\nexport default StationMap;\n","import React from \"react\";\nimport StationMap from \"./StationMap\";\nimport \"./StationDetail.css\";\n\nfunction StationDetail({ station }) {\n  if (!station) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      <h2>Station details</h2>\n      <dl>\n        <dt>Name</dt>\n        <dd>{station.name}</dd>\n        <dt>Address</dt>\n        <dd>{station.address}</dd>\n        <dt>Rental methods</dt>\n        <dd>{station.rental_methods.join(\", \")}</dd>\n      </dl>\n      <StationMap\n        latitude={station.lat}\n        longitude={station.lon}\n        name={station.name}\n        address={station.address}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default StationDetail;\n","import React, { useState } from \"react\";\nimport useStations from \"../hooks/useStations\";\nimport SearchBox from \"../SearchBox\";\nimport StationDetail from \"../Station/StationDetail\";\n\nconst stationsURL =\n  \"https://hamilton.socialbicycles.com/opendata/station_information.json\";\n\nfunction Main() {\n  const stations = useStations(stationsURL);\n  const [selectedStation, setSelectedStation] = useState(\"\");\n\n  if (stations.state === \"pending\") {\n    return <div>Loading stations...</div>;\n  }\n\n  if (stations.state === \"rejected\") {\n    return (\n      <div>\n        Something went wrong when fetching stations:\n        {\" \" + stations.error}\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <SearchBox\n        stations={stations.value}\n        setSelectedStation={setSelectedStation}\n      />\n      <StationDetail station={selectedStation} />\n    </React.Fragment>\n  );\n}\n\nexport default Main;\n","import { useState, useEffect } from \"react\";\n\nexport default function useStations(stationsURL) {\n  const [stations, setStations] = useState({ state: \"pending\" });\n\n  useEffect(() => {\n    function handleError(error) {\n      setStations({\n        state: \"rejected\",\n        error: error.message,\n      });\n    }\n\n    async function fetchData() {\n      const response = await fetch(stationsURL);\n\n      if (!response.ok) {\n        throw new Error(`${response.status} ${response.statusText}`);\n      }\n\n      const responseBody = await response.json();\n      setStations({ state: \"resolved\", value: responseBody.data.stations });\n    }\n\n    fetchData().catch(handleError);\n  }, [stationsURL]);\n\n  return stations;\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport Main from \"../Main\";\n\nfunction App() {\n  return (\n    <main className=\"App\">\n      <section>\n        <h1>\n          üö≤ Find-a-bikeshare<sup>TM</sup>Ô∏è\n        </h1>\n        <Main />\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}